
import java.util.ArrayList;

/**
 *This is the object class, which holds stuff like the information about a vuln like what command to execute to find it, what that 
 * output compares to, which computers the vuln works on.
 * @author Ryan
 */
public class Vulnerability
{
    private final char[] certifiedComputers;    //This holds all of the computers the vuln. can work on
    private ArrayList<RemoteArgs> findCommand;             //This is the command that can see if the vuln is solved or not
    private final String compareOutput;           //compares the output to see if the find command returned the necessary info
    private final ArrayList<RemoteArgs> createCommand;           //This is the command to create this vuln if necessary
    private final boolean whichOS;                //This has 2 forms, false for Windows and true for Linux
    public static final boolean LINUX = true;     //an answer for whichOS
    public static final boolean WINDOWS = false;  //an answer for whichOS
    public static final char UBUNTU12 =  1;  //type of certified Computer
    public static final char UBUNTU14 = 2;
    public static final char WINDOWS7 = 3;
    public static final char WINDOWS8 = 4;
    public static final char WINDOWSSERVER2008 = 5;
    public static final char DEBIAN = 6;
    public static final char WINDOWS10 = 7;
    public static final String[] COMPUTERS = new String[]{"UBUNTU12","UBUNTU14","WINDOWS7","WINDOWS8","WINDOWSSERVER2008","DEBIAN","WINDOWS10"};
    public static final char[] CHARCOMPUTERS = new char[]{1,2,3,4,5,6,7};
    private final int worthPoints;
    private final String name;
    private final boolean isPenalty;
    
    /**
     * This is the constructor for a Vulnerability
     * @param whichOS a boolean of which Operating System the Vulnerability is allowed to <b>run on</b>, NOT that the computer is running on. Should only be {@link #WINDOWS} or {@link #LINUX}.
     * @param certifiedComputers a char array containing the computer types the Vulnerability can run on. Must be one of the variable names that can be chosen from, like {@link #UBUNTU12} and {@link #WINDOWS8}.
     * @param findCommand an ArrayList<{@link RemoteArgs}> that can be executed on the computer in order to get the output to determine if the vulnerability was solved properly.
     * @param compareOutput an ArrayList<{@link RemoteArgs}> that will be used to compare the output/error/status of the {@code #findCommand} to determine if the vulnerability was solved or not.
     * @param createCommand an ArrayList<{@link RemoteArgs}> that can be executed on the computer in order to create that vulnerability.
     * @param worthPoints an int that sets how much each this Vulnerability is worth solving.
     * @param name is the name of the Vulnerability. This is used when displaying what was solved. 
     * @param isPenalty is a boolean determining if the Vulnerability is one that is a penalty (like deleting a user that should be there) or not
     */
    public Vulnerability(boolean whichOS, char[] certifiedComputers, ArrayList<RemoteArgs> findCommand, String compareOutput, ArrayList<RemoteArgs> createCommand, int worthPoints, String name, boolean isPenalty)
    {
        this.certifiedComputers = certifiedComputers;
        this.findCommand = findCommand;
        this.whichOS = whichOS;
        this.createCommand = createCommand;
        this.name = name;
        this.worthPoints = worthPoints;
        this.compareOutput = compareOutput;
        this.isPenalty = isPenalty;
    }
    
    /**
     * This is the constructor for a Vulnerability
     * @param whichOS a boolean of which Operating System the Vulnerability is allowed to <b>run on</b>, NOT that the computer is running on. Should only be {@link #WINDOWS} or {@link #LINUX}.
     * @param certifiedComputers a String containing the computer types the Vulnerability can run on. Must be one of the variable names that can be chosen from, like {@link #UBUNTU12} and {@link #WINDOWS8} and must be separated by semicolons.
     * @param findCommand a String that can be converted so it can be executed on the computer in order to get the output to determine if the vulnerability was solved properly.
     * @param compareOutput a String that can be converted that will be used to compare the output/error/status of the {@code #findCommand} to determine if the vulnerability was solved or not.
     * @param createCommand a String that can be converted that can be executed on the computer in order to create that vulnerability.
     * @param worthPoints an int that sets how much each this Vulnerability is worth solving.
     * @param name is the name of the Vulnerability. This is used when displaying what was solved. 
     * @param isPenalty is a boolean determining if the Vulnerability is one that is a penalty (like deleting a user that should be there) or not
     */
    public Vulnerability(boolean whichOS, String certifiedComputers, String findCommand, String compareOutput, String createCommand, int worthPoints, String name, boolean isPenalty)
    {
        //this.certifiedComputers = certifiedComputers;
        String[] stuff = certifiedComputers.split(";");
        this.certifiedComputers = new char[stuff.length];
        for (int i = 0; i < stuff.length; i++)  //for every computer that is certified
        {
            for (int a = 0; a < COMPUTERS.length; a++) //for every currently authorized certified computer
            {
                if (COMPUTERS[a].equals(stuff[i]))  //If the correct computer type is found
                this.certifiedComputers[i]=CHARCOMPUTERS[a];    //This is here cause need to go from finding the correct variable to getting variable value.
            }
        }
        
        //this.findCommand = findCommand;
        this.findCommand = convertStringToArgument(findCommand);
        
        this.whichOS = whichOS;
        //this.createCommand = createCommand;
        this.createCommand = convertStringToArgument(createCommand);
        this.name = name;
        this.worthPoints = worthPoints;
        this.compareOutput = compareOutput;
        this.isPenalty = isPenalty;
    }
    
    private ArrayList<RemoteArgs> convertStringToArgument(String str)
    {
        ArrayList<RemoteArgs> list = new ArrayList<>();
        
        String[] stuff = str.split("\"");
        int everyOther = 0;     //This will be modded by 2 to see if that section should or shouldn't be in quotes
        for (String stuff1 : stuff) //for each of the sections that are either quoted or not
        {
            list.add(new RemoteArgs(stuff1, everyOther++ % 0x2 != 0));
        }
        
        return list;
    }
    
    /**
     * Tests to see if the computer given can use this Vulnerability.
     * @param computer - The type of computer that you want to test.
     * @return - If the Vulnerability can be used in {@code computer}
     */
    protected boolean isComputerCertified(int computer)  //Computer should be one of the defined variables above.
    {
        for (int i = 0; i < certifiedComputers.length; i++)
        {
            if (certifiedComputers[i] == computer)
                return true;
        }
        return false;
    }
    
    /**
     * @return - Returns the command to create the Vulnerability onto the computer
     */
    protected ArrayList<RemoteArgs> toCreateVuln()
    {
        return createCommand;
    }
    
    /**
     * 
     * @return - The command to execute on the computer to determine if the Vulnerability is on the computer.
     */
    protected ArrayList<RemoteArgs> toFindVuln()   //returns the command that can be executed on the computer in order to determine if the computer has the vuln or not.
    {
        return findCommand;
    }
    
    /**
     * @return the amount of points solving this Vulnerability is worth.
     */
    protected int pointsWorth()
    {
        return worthPoints;
    }
    
    /**
     * This method rewrites the command that will be used to determine if the vulnerability is still on the computer.
     * @param command an ArrayList<{@link RemoteArgs}> that can be executed on the computer in order to get the output to determine if the vulnerability was solved properly.
     */
    protected void setFindCommand(ArrayList<RemoteArgs> command)
    {
        findCommand = command;
    }
    
    /**
     * This method rewrites the command that will be used to create the vulnerability the computer.
     * @param command an ArrayList<{@link RemoteArgs}> that can be executed on the computer in order to create that vulnerability.
     */
    protected void setCreateCommand(ArrayList<RemoteArgs> command)
    {
        findCommand = command;
    }
    
    /**
     * @return {@link compareOutput}, the String to compare to the output of {@link #findCommand}.
     */
    protected String toCompare()
    {
        return compareOutput;
    }
    
    /**
     * @return returns if the Vulnerability is a penalty or not.
     */
    protected boolean isPenalty()
    {
        return isPenalty;
    }
    
    protected String getName()
    {
        return name;
    }
}
